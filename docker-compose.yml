version: '3.8'

#local:docker
services:
    #node Service
    app:
        build:
            context: ./
            dockerfile: ./node/Dockerfile
        container_name: app #nodejs
        volumes:
            - ./src:/usr/app/src
            - /usr/app/src/node_modules
        ports: 
            - 49160:3000
        networks:
            - app-network
        depends_on: 
            - db
    # Nginx Service
    # webserver:
    #     image: nginx:latest
    #     container_name: webserver
    #     volumes: 
    #         - ./src:/var/www
    #         - ./nginx/conf.d/:/etc/nginx/conf.d/
    #     ports:
    #         - 8080:80
    #         - 443:443
    #     networks:
    #         - app-network

    # #MySQL/MongoDB Service
    # db:
    #     image: mysql:5.7.22
    #     container_name: db
    #     env_file: ./.env
    #     volumes: 
    #         - mysql:/var/lib/mysql
    #         - ./mysql/my.cnf:/etc/mysql/my.cnf
    #     restart: unless-stopped
    #     tty: true
    #     ports:
    #         # - "8889:3306"
    #         - $MYSQL_LOCAL_PORT:$MYSQL_DOCKER_PORT
    #     environment:
    #         MYSQL_DATABASE: app_db
    #         MYSQL_ROOT_PASSWORD: root
    #         MYSQL_PASSWORD: root
    #         MYSQL_USER: root
    #         SERVICE_TAGS: dev
    #         SERVICE_NAME: mysql
    #     networks:
    #         - app-network

    db:
        image: mongo:4.1.8-xenial
        container_name: db
        restart: unless-stopped
        env_file: .env
        environment:
            - MONGO_INITDB_ROOT_USERNAME=$MONGO_USERNAME
            - MONGO_INITDB_ROOT_PASSWORD=$MONGO_PASSWORD
        volumes:
            - dbdata:/data/db
        networks:
            - app-network

#Docker Networks
networks:
    app-network:
        driver: bridge

#Volumes
# volumes:
    # mysql: